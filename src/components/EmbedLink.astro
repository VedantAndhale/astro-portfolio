---
// EmbedLink.astro - Enhanced iframe component with responsive design and visual improvements
interface Props {
    src: string;
    title: string;
    width?: number | string;
    height?: number | string;
    aspectRatio?: "16:9" | "4:3" | "1:1" | "9:16";
    allowFullscreen?: boolean;
    loading?: "lazy" | "eager";
    class?: string;
    style?: string;
    theme?: "light" | "dark" | "auto";
    border?: boolean;
    rounded?: "none" | "sm" | "md" | "lg" | "xl" | "2xl" | "full";
    shadow?: "none" | "sm" | "md" | "lg" | "xl" | "2xl";
}

const {
    src,
    title,
    width = "100%",
    height = "auto",
    aspectRatio = "16:9",
    allowFullscreen = true,
    loading = "lazy",
    class: className = "",
    style = "",
    theme = "auto",
    border = true,
    rounded = "lg",
    shadow = "md",
} = Astro.props;

// Calculate padding based on aspect ratio
let paddingBottom;
switch (aspectRatio) {
    case "16:9":
        paddingBottom = "56.25%"; // 9/16 = 0.5625
        break;
    case "4:3":
        paddingBottom = "75%"; // 3/4 = 0.75
        break;
    case "1:1":
        paddingBottom = "100%"; // 1/1 = 1
        break;
    case "9:16":
        paddingBottom = "177.78%"; // 16/9 = 1.7778
        break;
    default:
        paddingBottom = "56.25%"; // Default to 16:9
}

// Set border classes
const borderClasses = border
    ? "border border-gray-200 dark:border-gray-800"
    : "";

// Set rounded classes
let roundedClasses;
switch (rounded) {
    case "none":
        roundedClasses = "";
        break;
    case "sm":
        roundedClasses = "rounded-sm";
        break;
    case "md":
        roundedClasses = "rounded-md";
        break;
    case "lg":
        roundedClasses = "rounded-lg";
        break;
    case "xl":
        roundedClasses = "rounded-xl";
        break;
    case "2xl":
        roundedClasses = "rounded-2xl";
        break;
    case "full":
        roundedClasses = "rounded-full";
        break;
    default:
        roundedClasses = "rounded-lg";
}

// Set shadow classes
let shadowClasses;
switch (shadow) {
    case "none":
        shadowClasses = "";
        break;
    case "sm":
        shadowClasses = "shadow-sm";
        break;
    case "md":
        shadowClasses = "shadow-md";
        break;
    case "lg":
        shadowClasses = "shadow-lg";
        break;
    case "xl":
        shadowClasses = "shadow-xl";
        break;
    case "2xl":
        shadowClasses = "shadow-2xl";
        break;
    default:
        shadowClasses = "shadow-md";
}

// Generate theme classes
let themeClasses = "";
if (theme === "light") {
    themeClasses = "bg-white";
} else if (theme === "dark") {
    themeClasses = "bg-gray-900";
} else {
    themeClasses = "bg-white dark:bg-gray-900";
}

// Generate additional container classes for visual enhancement
const containerClasses = `embed-container ${themeClasses} ${borderClasses} ${roundedClasses} ${shadowClasses} transition-all duration-300 hover:shadow-lg ${className}`;
---

<figure class={containerClasses} style={style} data-embed-theme={theme}>
    <div class="embed-aspect-ratio" style={`padding-bottom: ${paddingBottom};`}>
        <iframe
            src={src}
            title={title}
            width={width}
            height={height}
            allowfullscreen={allowFullscreen}
            loading={loading}
            referrerpolicy="no-referrer"
            class="embed-iframe"
            aria-label={title}></iframe>
    </div>
    {
        title && (
            <figcaption class="embed-caption text-center text-sm text-gray-600 dark:text-gray-400 mt-2 px-3 py-1">
                {title}
            </figcaption>
        )
    }
</figure>

<style>
    .embed-container {
        position: relative;
        width: 100%;
        max-width: 100%;
        margin: 1.5rem 0;
        overflow: hidden;
        /* Create subtle highlight effect for the container */
        background-image: linear-gradient(
            to bottom right,
            rgba(255, 255, 255, 0.05),
            rgba(255, 255, 255, 0)
        );
        /* Create an elegant backdrop effect */
        backdrop-filter: blur(4px);
        transition: all 0.3s ease;
    }

    .embed-container:hover {
        /* Add subtle transform effect on hover */
        transform: translateY(-2px);
    }

    .embed-aspect-ratio {
        position: relative;
        height: 0;
        overflow: hidden;
    }

    .embed-iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: none;
        /* Add inner shadow for depth */
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
    }

    /* Enhanced styling for different themes */
    .embed-container[data-embed-theme="light"] {
        --embed-bg: rgb(255, 255, 255);
        --embed-border: rgba(226, 232, 240, 1);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    }

    .embed-container[data-embed-theme="dark"] {
        --embed-bg: rgb(17, 24, 39);
        --embed-border: rgba(55, 65, 81, 1);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);
    }

    .embed-container[data-embed-theme="auto"] {
        --embed-bg: rgb(255, 255, 255);
        --embed-border: rgba(226, 232, 240, 1);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    }

    @media (prefers-color-scheme: dark) {
        .embed-container[data-embed-theme="auto"] {
            --embed-bg: rgb(17, 24, 39);
            --embed-border: rgba(55, 65, 81, 1);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);
        }
    }

    /* Add hover effect to emphasize the content */
    .embed-container:hover .embed-iframe {
        filter: brightness(1.03);
    }

    /* Accessibility focus states */
    .embed-container:focus-within {
        outline: 2px solid rgb(59, 130, 246);
        outline-offset: 4px;
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
        .embed-container {
            margin: 1rem 0;
        }
    }
</style>
