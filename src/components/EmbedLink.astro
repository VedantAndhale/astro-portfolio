---
// EmbedLink.astro - Renders an iframe for embedding content with performance optimizations

interface Props {
  src: string;
  title: string;
  class?: string;
  rounded?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  shadow?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'inner' | 'none';
  aspectRatio?: string; // e.g., '16/9' or '4/3'
  allow?: string; // e.g., "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
  allowfullscreen?: boolean;
}

const {
  src,
  title,
  class: className = '',
  rounded,
  shadow,
  aspectRatio = '16/9', // Default aspect ratio
  allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share',
  allowfullscreen = true,
} = Astro.props;

const roundedClass = rounded ? `rounded-${rounded}` : '';
const shadowClass = shadow ? `shadow-${shadow}` : '';
const uniqueId = `embed-${Math.random().toString(36).substring(7)}`;
---

<div
  id={uniqueId}
  class:list={[
    `relative aspect-w-${aspectRatio.split('/')[0]} aspect-h-${aspectRatio.split('/')[1]} overflow-hidden`,
    roundedClass,
    shadowClass,
    className,
  ]}
>
  <!-- Placeholder -->
  <div
    class="placeholder absolute inset-0 flex items-center justify-center bg-gray-200 dark:bg-gray-700"
  >
    <svg
      class="h-8 w-8 animate-spin text-gray-500 dark:text-gray-400"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  </div>

  <!-- Iframe (initially without src) -->
  <iframe
    data-src={src}
    title={title}
    class:list={[
      'absolute inset-0 h-full w-full opacity-0 transition-opacity duration-500',
      roundedClass,
    ]}
    allow={allow}
    allowfullscreen={allowfullscreen}
    loading="lazy"
  >
  </iframe>
</div>

{/* Add is:inline to the script tag */}
<script is:inline define:vars={{ uniqueId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const linkElement = document.getElementById(uniqueId);
    if (linkElement) {
      const iframe = linkElement.querySelector('iframe');
      const placeholder = linkElement.querySelector('.placeholder');

      const observer = new IntersectionObserver(
        (entries, obs) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && iframe && !iframe.getAttribute('src')) {
              const src = iframe.getAttribute('data-src');
              if (src) {
                iframe.setAttribute('src', src);
                iframe.onload = () => {
                  if (placeholder) placeholder.style.display = 'none';
                  iframe.style.opacity = '1';
                };
              }
              obs.unobserve(linkElement); // Stop observing once loaded
            }
          });
        },
        { rootMargin: '50px' }
      ); // Start loading 50px before it enters viewport

      observer.observe(linkElement);
    }
  });
</script>

<style>
  /* Ensure aspect ratio classes work */
  .aspect-w-16 {
    --tw-aspect-w: 16;
  }
  .aspect-h-9 {
    --tw-aspect-h: 9;
  }
  .aspect-w-4 {
    --tw-aspect-w: 4;
  }
  .aspect-h-3 {
    --tw-aspect-h: 3;
  }

  [class*='aspect-w-'][class*='aspect-h-'] {
    position: relative;
    padding-bottom: calc(var(--tw-aspect-h) / var(--tw-aspect-w) * 100%);
  }

  /* Remove the absolute positioning for direct children as iframe is now absolute */
  /* [class*='aspect-w-'][class*='aspect-h-'] > * { ... } */

  /* Keep iframe absolute positioning if needed, handled by iframe classes now */
</style>
