---
// OptimizedImage.astro - Optimizes images for better performance
interface Props {
    src: string;
    alt: string;
    width: number;
    height: number;
    class?: string;
    loading?: "lazy" | "eager";
    decoding?: "async" | "sync" | "auto";
    sizes?: string;
    fetchpriority?: "high" | "low" | "auto";
    critical?: boolean; // Prop to indicate if this is a critical above-the-fold image
    eager?: boolean; // For backward compatibility
}

const {
    src,
    alt,
    width,
    height,
    class: className = "",
    loading = "lazy",
    decoding = "async",
    sizes = "100vw",
    fetchpriority,
    critical = false, // Default to non-critical
    eager = false, // For backward compatibility
} = Astro.props;

import { Image } from "astro:assets";

// Handle both remote and local images
const isRemoteImage = src.startsWith("http");

// Check if image is critical or eager loaded (backward compatibility)
const isCritical = critical || eager;

// For critical images, override with eager loading and high priority
const effectiveLoading = isCritical ? "eager" : loading;
const effectiveFetchPriority = isCritical ? "high" : fetchpriority;
const effectiveDecoding = isCritical ? "sync" : decoding;

// Determine responsive sizes based on width
const responsiveSizes =
    sizes === "100vw" && width <= 800
        ? `(max-width: 640px) ${Math.min(width, 640)}px, ${width}px`
        : sizes;

// Add content visibility and other performance optimizations
const imgStyle = isCritical
    ? "will-change: transform;"
    : "content-visibility: auto; will-change: transform; contain: paint;";

// Prepare preload link for critical images
let imgSrc = "";
if (isCritical && !isRemoteImage) {
    imgSrc = src.startsWith("/") ? src : `/${src}`;
}
---

<!-- Advanced image preloading for critical images -->{
    isCritical && !isRemoteImage && (
        <link
            rel="preload"
            href={src}
            as="image"
            type="image/webp"
            fetchpriority="high"
            slot="head"
            imagesizes={responsiveSizes}
            imagesrcset={`${src}?w=640 640w, ${src}?w=${width} ${width}w`}
        />
    )
}

{
    isRemoteImage ? (
        <img
            src={src}
            alt={alt}
            width={width}
            height={height}
            class={className}
            loading={effectiveLoading}
            decoding={effectiveDecoding}
            sizes={responsiveSizes}
            fetchpriority={effectiveFetchPriority}
            style={imgStyle}
        />
    ) : (
        <Image
            src={src}
            alt={alt}
            width={width}
            height={height}
            class={className}
            loading={effectiveLoading}
            quality={isCritical ? 85 : 75}
            format="webp"
            decoding={effectiveDecoding}
            sizes={responsiveSizes}
            fetchpriority={effectiveFetchPriority}
            style={imgStyle}
        />
    )
}
