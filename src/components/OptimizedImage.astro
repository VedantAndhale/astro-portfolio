---
// OptimizedImage.astro - Optimizes images for better performance
interface Props {
    src: string;
    alt: string;
    width: number;
    height: number;
    class?: string;
    loading?: "lazy" | "eager";
    decoding?: "async" | "sync" | "auto";
    sizes?: string;
    fetchpriority?: "high" | "low" | "auto";
    critical?: boolean; // Prop to indicate if this is a critical above-the-fold image
}

const {
    src,
    alt,
    width,
    height,
    class: className = "",
    loading = "lazy",
    decoding = "async",
    sizes = "100vw",
    fetchpriority,
    critical = false, // Default to non-critical
} = Astro.props;

import { Image } from "astro:assets";

// Handle both remote and local images
const isRemoteImage = src.startsWith("http");

// For critical images, override with eager loading and high priority
const effectiveLoading = critical ? "eager" : loading;
const effectiveFetchPriority = critical ? "high" : fetchpriority;
const effectiveDecoding = critical ? "sync" : decoding;

// Add preload for critical images
if (critical && !isRemoteImage) {
    // Add preload link for critical images
    const imgSrc = src.startsWith("/") ? src : `/${src}`;
    const preloadLink = `<link rel="preload" as="image" href="${imgSrc}" fetchpriority="high">`;
    Astro.slots.render("head").then((head) => {
        if (!head) {
            // If no head slot is defined, add to the document head
            const fragment = document.createDocumentFragment();
            const temp = document.createElement("div");
            temp.innerHTML = preloadLink;
            fragment.appendChild(temp.firstChild);
            document.head.appendChild(fragment);
        }
    });
}
---

<!-- Advanced image preloading for critical images -->{
    critical && !isRemoteImage && (
        <link
            rel="preload"
            href={src}
            as="image"
            type="image/webp"
            fetchpriority="high"
            slot="head"
        />
    )
}

{
    isRemoteImage ? (
        <img
            src={src}
            alt={alt}
            width={width}
            height={height}
            class={className}
            loading={effectiveLoading}
            decoding={effectiveDecoding}
            sizes={sizes}
            fetchpriority={effectiveFetchPriority}
            style={critical ? "" : "content-visibility: auto;"}
        />
    ) : (
        <Image
            src={src}
            alt={alt}
            width={width}
            height={height}
            class={className}
            loading={effectiveLoading}
            quality={critical ? 85 : 75}
            format="webp"
            decoding={effectiveDecoding}
            sizes={sizes}
            fetchpriority={effectiveFetchPriority}
            style={critical ? "" : "content-visibility: auto;"}
        />
    )
}
