---
/**
 * TableOfContents.astro
 * A reusable Table of Contents component that extracts and displays headings from content
 */
import type { MarkdownHeading } from 'astro';
import type { TableOfContentsProps } from '../../types'; // Use relative path

// Rename Props to TableOfContentsProps
// interface TableOfContentsProps { // Remove local interface definition
//   headings: MarkdownHeading[];
//   title?: string;
//   minDepth?: number;
//   maxDepth?: number;
//   position?: 'sidebar' | 'inline';
//   class?: string;
//   collapsible?: boolean;
// }

// Update props destructuring
const {
  headings,
  title = 'Table of Contents',
  minDepth = 1,
  maxDepth = 6,
  position = 'sidebar',
  class: className = '',
  collapsible = false,
} = Astro.props; // Remove explicit type annotation

// Filter headings by min/max depth settings
const filteredHeadings = headings.filter(
  (heading: MarkdownHeading) =>
    heading.depth >= minDepth && heading.depth <= maxDepth // Add type annotation
);

// Create nested structure for TOC
type TocItem = {
  heading: MarkdownHeading;
  children: TocItem[];
};

function buildTocTree(
  headings: MarkdownHeading[],
  minDepth: number
): TocItem[] {
  // First pass: determine actual min depth in the document
  let actualMinDepth = 6; // Initialize to maximum possible heading level
  headings.forEach((heading) => {
    if (heading.depth < actualMinDepth) {
      actualMinDepth = heading.depth;
    }
  });

  // Use actual min depth if it's valid, otherwise use the provided minDepth
  const effectiveMinDepth =
    actualMinDepth >= 1 && actualMinDepth <= 6 ? actualMinDepth : minDepth;

  // Create a hierarchical structure where each heading properly nests under its parent
  const result: TocItem[] = [];
  const stack: TocItem[] = [];

  headings.forEach((heading) => {
    const item: TocItem = { heading, children: [] };

    // If this is a top-level heading, add it to the result
    if (heading.depth === effectiveMinDepth) {
      result.push(item);
      stack.length = 0; // Clear the stack
      stack.push(item);
      return;
    }

    // Find the appropriate parent for this heading based on its depth
    while (
      stack.length > 0 &&
      stack[stack.length - 1].heading.depth >= heading.depth
    ) {
      stack.pop(); // Remove items from stack until we find a parent with lower depth
    }

    // If we have no potential parent in the stack, add to root level
    if (stack.length === 0) {
      result.push(item);
    } else {
      // Add as a child to the last item in stack (its parent)
      stack[stack.length - 1].children.push(item);
    }

    // Add this item to the stack so it can be a parent for future headings
    stack.push(item);
  });

  return result;
}

const tocTree = buildTocTree(filteredHeadings, minDepth);

// Update the numbering logic to ensure unique numbering for same-level headings
function assignTocNumbers(tocTree: TocItem[]) {
  const counters: Record<number, number> = {};

  function assignNumbers(items: TocItem[], depth = 1) {
    items.forEach((item) => {
      if (!counters[depth]) counters[depth] = 0;
      counters[depth]++;

      // Assign the number to the heading
      // @ts-expect-error - Dynamically adding number property
      item.heading.number = counters[depth];

      // Reset deeper levels
      Object.keys(counters).forEach((key) => {
        const keyNum = parseInt(key);
        if (keyNum > depth) counters[keyNum] = 0;
      });

      // Recursively assign numbers to children
      if (item.children.length > 0) {
        assignNumbers(item.children, depth + 1);
      }
    });
  }

  assignNumbers(tocTree);
}

// Generate numbers for the TOC tree
assignTocNumbers(tocTree);

// Generate unique ID for collapsible TOC
const tocId = `toc-${Math.random().toString(36).substring(2, 9)}`;
---

<div
  class={`toc toc-${position} ${className} ${collapsible ? 'collapsible' : ''}`}
>
  {
    collapsible ? (
      <details open>
        <summary class="toc-title">
          {title}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="toc-toggle"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clip-rule="evenodd"
            />
          </svg>
        </summary>
        <nav id={tocId} aria-label="Table of Contents">
          <ul class="toc-list">
            {tocTree.map((item) => (
              <li class={`toc-item depth-${item.heading.depth}`}>
                <a href={`#${item.heading.slug}`} class="toc-link">
                  <span class="toc-text">{item.heading.text}</span>
                </a>
                {item.children.length > 0 && (
                  <ul class="toc-sublist">
                    {item.children.map((child) => (
                      <li class={`toc-item depth-${child.heading.depth}`}>
                        <a href={`#${child.heading.slug}`} class="toc-link">
                          <span class="toc-text">{child.heading.text}</span>
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </nav>
      </details>
    ) : (
      <>
        <h2 class="toc-title">{title}</h2>
        <nav id={tocId} aria-label="Table of Contents">
          <ul class="toc-list">
            {tocTree.map((item) => (
              <li class={`toc-item depth-${item.heading.depth}`}>
                <a href={`#${item.heading.slug}`} class="toc-link">
                  <span class="toc-text">{item.heading.text}</span>
                </a>
                {item.children.length > 0 && (
                  <ul class="toc-sublist">
                    {item.children.map((child) => (
                      <li class={`toc-item depth-${child.heading.depth}`}>
                        <a href={`#${child.heading.slug}`} class="toc-link">
                          <span class="toc-text">{child.heading.text}</span>
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </nav>
      </>
    )
  }
</div>

<style>
  /* Base TOC styling */
  .toc {
    margin: 1.5rem 0;
    font-size: 0.95rem;
    line-height: 1.5;
    position: relative;
  }

  /* Enhanced title design with subtle accent */
  .toc-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    letter-spacing: 0.015em;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid rgba(59, 130, 246, 0.3);
    color: #111827;
  }

  :global(.dark) .toc-title {
    color: #f3f4f6;
    border-bottom-color: rgba(96, 165, 250, 0.3);
  }

  .toc-list,
  .toc-sublist {
    list-style: none;
    padding: 0;
    margin: 0;
    position: relative;
  }

  .toc-list {
    position: relative;
  }

  .toc-list::before {
    content: '';
    position: absolute;
    left: 0.75rem;
    top: 0;
    bottom: 0;
    width: 1px;
    background: linear-gradient(
      to bottom,
      rgba(59, 130, 246, 0) 0%,
      rgba(59, 130, 246, 0.3) 10%,
      rgba(99, 102, 241, 0.3) 90%,
      rgba(99, 102, 241, 0) 100%
    );
    z-index: 0;
  }

  :global(.dark) .toc-list::before {
    background: linear-gradient(
      to bottom,
      rgba(96, 165, 250, 0) 0%,
      rgba(96, 165, 250, 0.2) 10%,
      rgba(129, 140, 248, 0.2) 90%,
      rgba(129, 140, 248, 0) 100%
    );
  }

  .toc-sublist {
    margin-left: 1.5rem;
    margin-top: 0.5rem;
    margin-bottom: 0.75rem;
    padding-left: 1rem;
    position: relative;
  }

  .toc-item {
    margin-bottom: 0.25rem;
    position: relative;
    z-index: 1;
  }

  .toc-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: #4b5563;
    transition: all 0.2s ease;
    padding: 0.375rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 450;
    position: relative;
    margin-left: 1rem;
  }

  /* Style adjustments based on heading depth */
  .depth-1 > .toc-link {
    font-weight: 600;
    font-size: 1.05rem;
    color: #111827;
  }

  :global(.dark) .depth-1 > .toc-link {
    color: #f3f4f6;
  }

  .depth-2 > .toc-link {
    font-weight: 500;
  }

  .depth-3 > .toc-link {
    font-size: 0.95rem;
  }

  .depth-4 > .toc-link,
  .depth-5 > .toc-link,
  .depth-6 > .toc-link {
    font-size: 0.9rem;
    color: #6b7280;
  }

  :global(.dark) .depth-4 > .toc-link,
  :global(.dark) .depth-5 > .toc-link,
  :global(.dark) .depth-6 > .toc-link {
    color: #9ca3af;
  }

  :global(.dark) .toc-link {
    color: #d1d5db;
  }

  .toc-link::before {
    content: '';
    position: absolute;
    left: -1.5rem;
    top: 50%;
    transform: translateY(-50%);
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background-color: #e5e7eb;
    transition: all 0.2s ease;
  }

  :global(.dark) .toc-link::before {
    background-color: #4b5563;
  }

  .toc-link:hover {
    background-color: rgba(59, 130, 246, 0.1);
    color: #1d4ed8;
  }

  :global(.dark) .toc-link:hover {
    background-color: rgba(96, 165, 250, 0.1);
    color: #93c5fd;
  }

  .toc-link:hover::before {
    background-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
  }

  :global(.dark) .toc-link:hover::before {
    background-color: #60a5fa;
    box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.2);
  }

  /* Position-specific styles with enhanced visuals */
  .toc-sidebar {
    position: sticky;
    top: 6rem;
    max-height: calc(100vh - 10rem);
    overflow-y: auto;
    padding: 1.5rem;
    scrollbar-width: thin;
    background: linear-gradient(
      to bottom,
      rgba(249, 250, 251, 0.8),
      rgba(243, 244, 246, 0.8)
    );
    border-radius: 0.75rem;
    border: 1px solid rgba(229, 231, 235, 0.8);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    backdrop-filter: blur(8px);
    transition: all 0.3s ease;
  }

  :global(.dark) .toc-sidebar {
    background: linear-gradient(
      to bottom,
      rgba(31, 41, 55, 0.8),
      rgba(17, 24, 39, 0.8)
    );
    border-color: rgba(55, 65, 81, 0.8);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .toc-inline {
    width: 100%;
    border-bottom: 1px solid rgba(229, 231, 235, 0.8);
    padding-bottom: 1.5rem;
    margin-bottom: 2.5rem;
  }

  :global(.dark) .toc-inline {
    border-bottom-color: rgba(55, 65, 81, 0.8);
  }

  /* Collapsible TOC styles with improved visual cues */
  .toc.collapsible {
    border: 1px solid rgba(229, 231, 235, 0.8);
    border-radius: 0.75rem;
    padding: 1.25rem;
    background: linear-gradient(
      to bottom,
      rgba(249, 250, 251, 0.8),
      rgba(243, 244, 246, 0.8)
    );
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    backdrop-filter: blur(8px);
  }

  :global(.dark) .toc.collapsible {
    border-color: rgba(55, 65, 81, 0.8);
    background: linear-gradient(
      to bottom,
      rgba(31, 41, 55, 0.8),
      rgba(17, 24, 39, 0.8)
    );
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .toc.collapsible summary {
    cursor: pointer;
    list-style: none;
    margin-bottom: 0.75rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
  }

  .toc.collapsible summary:hover {
    background-color: rgba(59, 130, 246, 0.1);
  }

  :global(.dark) .toc.collapsible summary:hover {
    background-color: rgba(96, 165, 250, 0.1);
  }

  .toc.collapsible summary::-webkit-details-marker {
    display: none;
  }

  .toc-toggle {
    width: 20px;
    height: 20px;
    transition: transform 0.3s ease;
    color: #6b7280;
  }

  :global(.dark) .toc-toggle {
    color: #9ca3af;
  }

  details[open] .toc-toggle {
    transform: rotate(180deg);
    color: #3b82f6;
  }

  :global(.dark) details[open] .toc-toggle {
    color: #60a5fa;
  }

  /* Active TOC item highlight */
  .toc-link.active {
    background-color: rgba(59, 130, 246, 0.15);
    color: #1d4ed8;
    font-weight: 600;
  }

  :global(.dark) .toc-link.active {
    background-color: rgba(96, 165, 250, 0.15);
    color: #93c5fd;
  }

  .toc-link.active::before {
    background-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
    width: 0.625rem;
    height: 0.625rem;
  }

  :global(.dark) .toc-link.active::before {
    background-color: #60a5fa;
    box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.2);
  }

  @media (max-width: 1024px) {
    .toc-sidebar {
      position: relative;
      top: 0;
      max-height: none;
    }
  }
</style>

{/* Add is:inline to the script tag */}
<script is:inline define:vars={{ tocId }}>
  document.addEventListener('DOMContentLoaded', () => {
    // const tocElement = document.getElementById(tocId); // Remove unused variable
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          if (entry.intersectionRatio > 0) {
            document.querySelectorAll(`#${tocId} .toc-link`).forEach((link) => {
              if (link.getAttribute('href') === `#${id}`) {
                link.classList.add('active');
              } else {
                link.classList.remove('active');
              }
            });
          }
        });
      },
      { rootMargin: '0px 0px -80% 0px' }
    );

    // Track all headers that have an ID applied
    document
      .querySelectorAll('h2[id], h3[id], h4[id], h5[id], h6[id]')
      .forEach((heading) => {
        observer.observe(heading);
      });
  });

  // Smooth scrolling for TOC links
  document.querySelectorAll(`#${tocId} .toc-link`).forEach((link) => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      const targetEl = document.querySelector(href);
      if (targetEl) {
        window.scrollTo({
          top: targetEl.offsetTop - 100,
          behavior: 'smooth',
        });
        // Update URL hash without scrolling
        history.pushState(null, null, href);
      }
    });
  });
</script>
