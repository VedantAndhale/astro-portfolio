---
/**
 * TocDrawer.astro
 * A collapsible drawer TOC component, ideal for mobile views
 */
import TableOfContents from './TableOfContents.astro';
// import type { MarkdownHeading } from 'astro'; // Remove unused import
import type { TocDrawerProps } from '../../types'; // Use relative path

// Rename Props to TocDrawerProps
// interface TocDrawerProps { // Remove local interface definition
//   headings: MarkdownHeading[];
//   title?: string;
//   minDepth?: number;
//   maxDepth?: number;
//   class?: string;
// }

// Update props destructuring
const {
  headings,
  title = 'Table of Contents',
  minDepth = 0,
  maxDepth = 4,
  class: className = '',
} = Astro.props; // Remove explicit type annotation

// Generate unique ID for the drawer
const drawerId = `toc-drawer-${Math.random().toString(36).substring(2, 9)}`;
---

<div
  class={`toc-drawer ${className} rounded-2xl border border-gray-200 bg-white/80 shadow-xl backdrop-blur-md dark:border-gray-800 dark:bg-gray-900/80`}
  id={drawerId}
>
  <button
    class="toc-drawer-toggle flex w-full items-center justify-between p-5"
    aria-controls={drawerId}
    aria-expanded="false"
  >
    <span class="toc-drawer-title flex items-center text-lg font-semibold">
      {/* Use Tailwind */}
      {/* Add PencilSquareIcon SVG */}
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="mr-2 h-5 w-5"
      >
        <path
          d="M21.731 2.269a2.625 2.625 0 0 0-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 0 0 0-3.712ZM19.513 8.199l-3.712-3.712-12.15 12.15a5.25 5.25 0 0 0-1.32 2.214l-.8 2.685a.75.75 0 0 0 .933.933l2.685-.8a5.25 5.25 0 0 0 2.214-1.32L19.513 8.2Z"
        ></path>
      </svg>
      {title}
    </span>
    {/* Keep existing dropdown arrow */}
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="toc-drawer-icon transition-transform duration-300"
    >
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  </button>

  <div class="toc-drawer-content border-t border-gray-200 dark:border-gray-700">
    {/* Add border */}
    <TableOfContents
      headings={headings}
      title=""
      minDepth={minDepth}
      maxDepth={maxDepth}
      position="inline"
      collapsible={false}
      class="p-5"
      Add
      padding
      via
      class
    />
  </div>
</div>

<style>
  .toc-drawer {
    /* Keep margin and overflow */
    margin: 1.5rem 0 2.5rem;
    overflow: hidden;
    /* Remove conflicting styles: border, border-radius, background-color, box-shadow */
    /* border: 1px solid rgba(255, 255, 255, 0.1); */
    /* border-radius: 0.75rem; */
    /* background-color: rgba(255, 255, 255, 0.03); */
    /* box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); */
    transition: all 0.3s ease;
  }

  .toc-drawer:hover {
    /* Remove conflicting styles */
    /* box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15); */
    /* border-color: rgba(255, 255, 255, 0.2); */
  }

  .toc-drawer-toggle {
    /* Remove conflicting styles handled by Tailwind */
    /* display: flex; */
    /* width: 100%; */
    /* justify-content: space-between; */
    /* align-items: center; */
    /* padding: 1.25rem 1.5rem; */
    background: none;
    border: none;
    text-align: left;
    /* font-size: 1.125rem; */
    /* font-weight: 600; */
    color: inherit;
    cursor: pointer;
    /* letter-spacing: 0.01em; */
    transition: background-color 0.2s ease;
  }

  .toc-drawer-toggle:hover {
    background-color: rgba(0, 0, 0, 0.03); /* Subtle hover */
  }
  :global(.dark) .toc-drawer-toggle:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .toc-drawer-title {
    /* Remove conflicting styles */
    /* font-size: 1.125rem; */
    /* letter-spacing: 0.015em; */
    /* display: flex; */
    /* align-items: center; */
    /* gap: 0.5rem; */
  }

  .toc-drawer-title::before {
    /* Remove old dot */
    /* content: ''; */
    /* display: inline-block; */
    /* width: 12px; */
    /* height: 12px; */
    /* background-color: rgba(255, 255, 255, 0.7); */
    /* border-radius: 2px; */
  }

  .toc-drawer-icon {
    /* Keep transition */
    transition: transform 0.3s ease;
    /* stroke-width: 2.5; */ /* Keep or adjust as needed */
  }

  .toc-drawer-content {
    max-height: 0;
    overflow: hidden;
    visibility: hidden;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    position: relative;
    /* Remove border-top, handled by Tailwind */
    /* border-top: 1px solid rgba(255, 255, 255, 0.05); */
  }

  .toc-drawer.open .toc-drawer-content {
    max-height: 60vh;
    /* Remove padding, handled by Tailwind on TableOfContents */
    /* padding: 0.5rem 1.5rem 1.5rem 1.5rem; */
    visibility: visible;
    opacity: 1;
    overflow-y: auto;
  }

  .toc-drawer.open .toc-drawer-icon {
    transform: rotate(180deg);
  }

  /* Show drawer on all screen sizes */
  .toc-drawer {
    display: block;
    max-width: 100%;
    position: relative;
    z-index: 10;
  }

  /* Enhanced styling for desktop */
  @media (min-width: 1024px) {
    .toc-drawer {
      max-width: min(100%, 700px);
      margin-left: auto;
      margin-right: auto;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocDrawers = document.querySelectorAll<HTMLDivElement>('.toc-drawer'); // Add type hint

    tocDrawers.forEach((drawer) => {
      const toggleButton =
        drawer.querySelector<HTMLButtonElement>('.toc-drawer-toggle'); // Add type hint
      const content = drawer.querySelector<HTMLDivElement>(
        '.toc-drawer-content'
      ); // Add type hint

      // Check if elements exist and are HTMLElements
      if (toggleButton && content instanceof HTMLElement) {
        // Initialize - hide content by default
        content.style.display = 'none';
        toggleButton.setAttribute('aria-expanded', 'false');

        // Add click event to toggle button
        toggleButton.addEventListener('click', () => {
          const isExpanded =
            toggleButton.getAttribute('aria-expanded') === 'true';
          toggleButton.setAttribute(
            'aria-expanded',
            isExpanded ? 'false' : 'true'
          );

          if (isExpanded) {
            content.style.display = 'none';
            drawer.classList.remove('open');
          } else {
            content.style.display = 'block';
            drawer.classList.add('open');
          }
        });

        // Add click events to all TOC links to close drawer when clicked
        const tocLinks =
          content.querySelectorAll<HTMLAnchorElement>('.toc-link'); // Add type hint
        tocLinks.forEach((link) => {
          link.addEventListener('click', () => {
            // Close the drawer after clicking a topic
            // Using setTimeout is generally okay here to allow navigation event to process
            setTimeout(() => {
              if (content instanceof HTMLElement) {
                // Re-check type guard
                content.style.display = 'none';
              }
              drawer.classList.remove('open');
              toggleButton.setAttribute('aria-expanded', 'false');
            }, 100); // Small delay
          });
        });
      }
    });
  });
</script>
